services:
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/9092' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - kafka_data:/var/lib/kafka
    networks:
      - kafka_net
      - shared

  kafka-connect:
    build:
      context: .
      dockerfile: ./kafka-connect/Dockerfile
    image: kafka-connect
    container_name: kafka-connect
    hostname: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8083:8083
    env_file:
      - .env
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      REST_ADVERTISED_HOST_NAME: connect
      REST_PORT: 8083
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      STATUS_STORAGE_TOPIC: docker-connect-status
      KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All
      CONNECT_PLUGIN_PATH: "/opt/kafka/plugins,/opt/kafka/custom-plugins"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8083/connectors || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - kafka_connect_data:/data
      - ./kafka-connect/custom-plugins:/opt/kafka/custom-plugins
    networks:
      - kafka_net
      - shared

  kafka-connect-init:
    image: softonic/curl-envsubst:latest
    container_name: kafka-connect-init
    hostname: kafka-connect-init
    depends_on:
      kafka-connect:
        condition: service_healthy
    env_file:
      - .env
    command: >
      sh -c "envsubst < /connectors-config/kafka-custom-http-connector.json | \
      curl -X POST http://kafka-connect:8083/connectors \
      -H \"Content-Type: application/json\" -d @-"
    volumes:
        - ./kafka-connect/connectors-config:/connectors-config
        - ./kafka-connect/scripts:/scripts
    networks:
      - kafka_net
      - shared

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_START_RPC: "false"
      CASSANDRA_ENDPOINT_SNITCH: "SimpleSnitch"
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'DESCRIBE KEYSPACES;' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - cassandra_net
      - shared

  cassandra-init:
    image: cassandra:4.1
    container_name: cassandra-init
    hostname: cassandra-init
    depends_on:
      cassandra:
        condition: service_healthy
    entrypoint: ["bash", "-c", "cqlsh cassandra -f /init.cql"]
    volumes:
      - ./cassandra/init.cql:/init.cql
    networks:
      - cassandra_net
      - shared

volumes:
  cassandra_data:
  kafka_data:
  kafka_connect_data:

networks:
  kafka_net:
  cassandra_net:
  shared:
    driver: bridge